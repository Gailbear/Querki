# Querki Persistence Configuration
#
# All of the configuration relating to Persistence, Cassandra, Kryo and so on belongs here.
#
# IMPORTANT: unlike application.conf, this *is* checked into GitHub. So any secret keys
# or the like MUST NEVER be included in this file!

akka {
  extensions = ["com.romix.akka.serialization.kryo.KryoSerializationExtension$"]

  cluster {    
    sharding {
      journal-plugin-id = "cassandra-journal"
      snapshot-plugin-id = "cassandra-snapshot-store"
    }
  }
  
  actor {
    
    kryo {
      # NOTE: we are requiring pre-registrating of classes, but this mostly happens in-code
      # through the Ecology's mechanisms.
      idstrategy = "explicit"
      
      resolve-subclasses = true
      
      # TODO: this can eventually go away:
      implicit-registration-logging = true
      
      # Turns on heavy spewage for Kryo:
      #kryo-trace = true
      
      # We customize Kryo initialization, so that we can use the TaggedFieldSerializer:
      kryo-custom-serializer-init = "querki.persistence.KryoInit"
      
      post-serialization-transformations = "lz4"
      
      # This is the important bit: we should be putting all classes to be
      # persisted into here. Be sure to check that a class isn't already listed
      # before adding it here. While it would be nice to arrange these in package
      # order, just leave them in numeric order and let it get a little messy.
      #
      # Note that classes not registered here will work, but will be persisted
      # inefficiently. Also, by listing them here the types are allowed to change
      # names, which matters a *lot*.
      #
      # IMPORTANT: once placed in here, the id must *NEVER* change!
      #
      # TODO: we might want to change this to something in-code, possibly by
      # enhancing akka-kryo-serialization. This stringly-typed approach is kind
      # of painfully fragile. Something like our OID approach, with a single
      # in-code listing, would be no *prettier*, but much less prone to typos.
      mappings {
      }
    }
    
    serializers {
      kryo = "com.romix.akka.serialization.kryo.KryoSerializer"
    }
    
    serialization-bindings {
      # All Kryo-serializable types -- that is, anything that may get persisted -- should be
      # marked with UseKryo:
      "querki.persistence.UseKryo" = kryo
    }
  
  }
  
  persistence {
    journal.plugin = "cassandra-journal"
    snapshot-store.plugin = "cassandra-snapshot-store"
    
    # These circuit-breaker settings are an unfortunate hack, necessary in order to get
    # functional tests to work. In setting up the tests, we found that the CircuitBreaker
    # in either SnapshotStore or AsyncWriteJournal was often timing out before it succeeded
    # in setting things up for recovery. As far as I can tell, when setting up Persistence
    # in a fresh Cassandra cluster (as we have each time we run ftst), it takes a while to
    # be ready -- and the system falls over and dies before then.
    #
    # So these are some intentionally conservative numbers, that give the system time to
    # properly set up.  
    journal-plugin-fallback {
      circuit-breaker {
        max-failures = 100
        call-timeout = 30s
      }
    }
    
    snapshot-store-plugin-fallback {
      circuit-breaker {
        max-failures = 100
        call-timeout = 60s
      }
    }
  }
}
