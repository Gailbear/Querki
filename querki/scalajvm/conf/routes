# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET     /                           @controllers.Application.index
GET     /robots.txt					@controllers.Application.robots
GET     /spaces                     @controllers.Application.spaces
GET     /newSpace                   @controllers.Application.newSpace
POST    /doNewSpace                 @controllers.Application.doNewSpace

GET     /help/                      @controllers.ClientController.space(userName = "systemUser", spaceId = "documentation")
GET     /help/:thingId              @controllers.ClientController.thingRedirect(userName = "systemUser", spaceId = "documentation", thingId)

GET     /TOS                        @controllers.TOSController.showTOS
POST    /TOS                        @controllers.TOSController.handleTOS

# The old way to address a Space, now replaced by the new client:
GET     /u/:userName/:spaceId/      @controllers.ClientController.space(userName, spaceId)

GET     /old/:userName/:spaceId/_explorer @controllers.ExploreController.showExplorer(userName, spaceId, thingId)
POST    /old/:userName/:spaceId/_evaluate @controllers.ExploreController.evaluate(userName, spaceId, thingId, ql)

# Note that these are still direct pages, not through the Client:
GET     /u/:userName/:spaceId/_handleInvite @controllers.LoginController.handleInvite(userName, spaceId)
POST    /u/:userName/:spaceId/_handleInvite @controllers.LoginController.signup(userName, spaceId)
POST    /u/:userName/:spaceId/_joinLogin  @controllers.LoginController.joinlogin(userName, spaceId)
GET     /u/:userName/:spaceId/_joinSpace  @controllers.LoginController.joinSpace(userName, spaceId)
GET     /u/:userName/:spaceId/_getCollaborators @controllers.LoginController.getCollaborators(userName, spaceId, q)

POST    /u/:userName/:spaceId/_photoUpload   @controllers.PhotoController.upload(userName, spaceId, thingId)

# API CALLS
# TODO: this should eventually replace the normal thing path, below:
POST    /u/:userName/:spaceId/_apiRequest @controllers.ClientController.apiRequest(userName, spaceId)
GET     /u/:userName/:spaceId/_marcoPolo @controllers.ClientController.marcoPolo(userName, spaceId, propId)
POST    /_userApiRequest            @controllers.ClientController.userApiRequest
POST    /_commonApiRequest          @controllers.ClientController.commonApiRequest

POST    /dologin                    @controllers.LoginController.dologin
GET     /logout                     @controllers.LoginController.logout

GET     /sendPasswordReset          @controllers.LoginController.sendPasswordReset
POST    /sendPasswordReset          @controllers.LoginController.doSendPasswordReset
GET     /resetPassword              @controllers.LoginController.resetPassword(email, expires:Long, hash)
POST    /resetPassword              @controllers.LoginController.doResetPassword(email, expiresMillis:Long, hash)
POST    /changeDisplayName          @controllers.LoginController.changeDisplayName(identityIdStr)

# User Profile functions
GET     /u/:userName                @controllers.LoginController.userByName(userName)
POST    /u/:userName/_changePassword @controllers.LoginController.changePassword(userName)

# Admin functionality
GET     /admin/manageUsers          @controllers.AdminController.manageUsers
GET     /admin/upgradePendingUser   @controllers.AdminController.upgradePendingUser(userId)
GET     /admin/makeAdmin            @controllers.AdminController.makeAdmin(userId)
GET     /adminJs                    @controllers.AdminController.javascriptRoutes
GET     /admin/showSpaceStatus      @controllers.AdminController.showSpaceStatus
GET     /admin/sendSystemMessage    @controllers.AdminController.sendSystemMessage
POST    /admin/sendSystemMessage    @controllers.AdminController.doSendSystemMessage

# Notifications
GET     /_notifications             @controllers.NotificationController.showNotifications

# Redirect pointers to Things to go to the Client: 
GET     /u/:userName/:spaceId/*thingId    @controllers.ClientController.thingRedirect(userName, spaceId, thingId)

# AJAX test stuff:
GET     /exploreRoutes              @controllers.ExploreController.javascriptRoutes

# Serve scala files under the scalajs subproject to be used by sourcemaps.
# TODO: This route and its controller method should be removed for production
GET     /scalajs/*file              @controllers.Application.scalajsFile(file)
GET     /scala/*file                @controllers.Application.scalaSharedFile(file)

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)
