# Template for the main configuration file for the application.
# This file should contain all of the *structure* of Querki's real configuration file,
# but without the real settings.
# IMPORTANT: always vet this carefully before checking it in!
# ~~~~~


# Querki configuration
querki {
  # These are the initial system logins. They will go away soon.
  test {
    # If enabled, this logs voluminous QL-parsing info
    logContexts : false
    # This logs the details of Thing Edit requests
    logEdits : false
    # This logs the headers of *all* requests to the system. USE ONLY WHEN NECESSARY!
    logAllRequests: false
  }
  
  app {
    urlRoot : "PUBLIC URL OF THIS SITE"
  }
  
  akka {
    # The default timeout to use unless stated otherwise:
    timeout : 30 seconds
  }
  
  admin {
    # The interval for sending heartbeats to the AdminMonitor
    monitorHeartbeat : 1 minute
    # How long to wait before concluding that a monitor is dead 
    monitorTimeout : 3 minutes
  }
  
  session {
    # Time before a UserSpaceSession times out for inactivity
    timeout : 5 minutes
  }
  
  userSession {
    # Time before an entire UserSession times out for inactivity
    timeout : 30 minutes
    collaborators {
      # Time before we recheck this person's list of collaborators
      timeout : 15 minutes
    }
  }
  
  space {
    # Time before a Space times out for inactivity
    timeout : 15 minutes
  }
  
  apps {
    # The size of each chunk being sent from an App to its child Spaces
    chunksize : 10000
  }
  
  mail {
    smtpHost : SMTP HOST
    from : EMAIL ADDRESS TO SEND FROM
    systemFrom : EMAIL ADDRESS SYSTEM EMAILS COME FROM
    systemName : DISPLAY NAME OF SYSTEM EMAILS
    debug : false
  }
  
  security {
    hashIterations : 20000
  }

  # These are configuration parameters that are deliberately public-visible.
  # BE CAREFUL HERE -- nothing at all private should go into this section!!!  
  public {
    # How many Spaces a normal user is allowed to own
    maxSpaces : 5
    # How many Members you can have in a Space
    maxMembersPerSpace : 500
  }
  
  aws {
    username : "AWS USER NAME"
    accessKeyId : "IMA ACCESS KEY ID"
    secretAccessKey : "IMA SECRET KEY"
    bucket : "S3 BUCKET"
    bucketUrl : "BASE URL, NO TRAILING SLASH"
  }
    
  cluster {
    # How long we allow for re-finding a Shard before we decide it is dead:
    shardRelookupTimeout : 10 minutes
    # How often should the QuerkiNodeCoordinator save a snapshot:
    snapshotInterval : 100
    # The number of OIDs to reserve at a time. This is a serious tuning parameter. Higher
    # means better latency for OID allocation requests, at the cost of more gaps in the
    # OID namespace.
    allocBlockSize : 10
    # How often to snapshot the state of each OIDAllocator, in blocks.
    allocSnapshotInterval : 10
  }
}

session {
  # By default, we give a one-month timeout on sessions
  # This key is undocumented but crucial!
  maxAge : 259200000
  # On the real site, this should be set to true once we are all-HTTPS:
  #secure : true
}

# Dispatcher for UserSessions    
session-dispatcher {
  # UserSession Actors need a DequeBasedMailbox, so they can use Stash:
  mailbox-type = "akka.dispatch.UnboundedDequeBasedMailbox"
}

    
akka {
#  event-handlers = ["akka.event.slf4j.Slf4jEventHandler"]
  loglevel = "DEBUG"
  debug {
    lifecycle = off
  }

  remote {
    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = "127.0.0.1"
      port = 2551
    }
  }
    
  cluster {
    # This is the fallback setup, for when we're not actually running under ConductR:
    seed-nodes = [
       "akka.tcp://local-querki-server@127.0.0.1:2551"
    ]
      
    auto-down-unreachable-after = 10s
  }
    
  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
  
    debug {
      # Enables LoggingReceive
      receive = on
      # Turns on logging of special system messages
      autoreceive = on
      # Turns on logging of actor lifecycle events
      lifecycle = on
    }
#    deployment {
# In principle, the SpaceManagerPersister should be defined here in config. In practice, I'm
# not clear on how to do that in Akka 2.1.4 while giving a supervisor strategy. So for now,
# it's happening in code.
#      /SpaceManager/space-manager-persist {
#        router = smallest-mailbox
#        resizer {
#          lower-bound = 2
#          upper-bound = 10
#        }
#      }
#    }
  }
  
  persistence {
    journal.plugin = "akka-persistence-sql-async.journal"
    snapshot-store.plugin = "akka-persistence-sql-async.snapshot-store"
  }
}

akka-persistence-sql-async {
  journal.class = "akka.persistence.journal.sqlasync.MySQLAsyncWriteJournal"
  snapshot-store.class = "akka.persistence.snapshot.sqlasync.MySQLSnapshotStore"

  user = DB LOGIN
  password = DB PASSWORD
  url = "jdbc:mysql://localhost/DATABASE NAME HERE"
  max-pool-size = 4 # total connection count
  wait-queue-capacity = 10000 # If query cannot be executed soon, it wait in the queue and will be executed later.
  journal-table-name = "persist_journal"
  snapshot-table-name = "persist_snapshot"
}

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
application.secret=GENERATED BY PLAY

# The application languages
# ~~~~~
application.langs="en"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# global=Global

# Database configuration
# ~~~~~ 
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# Default database configuration using H2 database engine in a persistent mode
#db.default.driver=org.h2.Driver
#db.default.url="jdbc:h2:testdb/default"
## db.default.user=sa
## db.default.password=

# We no longer use Play's Evolutions mechanism, for a variety of reasons:
evolutionplugin=disabled

# MySQL configuration for the System tables...
db.system.driver=com.mysql.jdbc.Driver
db.system.url="jdbc:mysql://localhost/DATABASE NAME HERE?characterEncoding=UTF-8"
db.system.user=DB LOGIN
db.system.password=DB PASSWORD
db.system.logStatements=true

# ... and for the User tables:
db.user.driver=com.mysql.jdbc.Driver
db.user.url="jdbc:mysql://localhost/DATABASE NAME HERE?characterEncoding=UTF-8"
db.user.user=DB LOGIN
db.user.password=DB PASSWORD
db.user.logStatements=true

# ... and for the Test Template database:
db.template.driver=com.mysql.jdbc.Driver
db.template.url="jdbc:mysql://localhost/test_system_template?characterEncoding=UTF-8"
db.template.user=DB LOGIN
db.template.password=DB PASSWORD
db.template.logStatements=true

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/), by providing a logger.xml file in the conf directory .
# QUERKI: Note that we're actually using the version in logger.xml for now, since that records the
# SQL traffic. When we don't need to do that, we can get rid of logger.xml and uncomment the lines below:

# Root logger:
#logger.root=ERROR

# Logger used by the framework:
#logger.play=INFO

# Logger provided to your application:
#logger.application=DEBUG

